services:
  db:
    image: postgres:12
    restart: always
    networks:
      - default
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}

  prestart:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    build:
      context: ./backend
    networks:
      - default
    depends_on:
      db:
        condition: service_healthy
        restart: true
    command: bash scripts/prestart.sh
    env_file:
      - .env
    environment:
      - FRONTEND_HOST=${FRONTEND_HOST?Variable not set}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - INFURA_API_KEY=${INFURA_API_KEY?Variable not set}
      - INFURA_HTTPS=${INFURA_HTTPS?Variable not set}
      - BINANCE_API_KEY=${BINANCE_API_KEY?Variable not set}
      - BINANCE_SPOT_API_URL=${BINANCE_SPOT_API_URL?Variable not set}
      - ETHERSCAN_API_KEY=${ETHERSCAN_API_KEY?Variable not set}
      - ETHERSCAN_URL=${ETHERSCAN_URL?Variable not set}
      - UNISWAP_V3_ETH_USDC_ADDRESS=${UNISWAP_V3_ETH_USDC_ADDRESS?Variable not set}
      - SCHEDULER_INTERVAL_MINUTES=${SCHEDULER_INTERVAL_MINUTES?Variable not set}

  backend:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - default
    depends_on:
      db:
        condition: service_healthy
        restart: true
      prestart:
        condition: service_completed_successfully
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - FRONTEND_HOST=${FRONTEND_HOST?Variable not set}
      - ENVIRONMENT=${ENVIRONMENT}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - INFURA_API_KEY=${INFURA_API_KEY?Variable not set}
      - INFURA_HTTPS=${INFURA_HTTPS?Variable not set}
      - BINANCE_API_KEY=${BINANCE_API_KEY?Variable not set}
      - BINANCE_SPOT_API_URL=${BINANCE_SPOT_API_URL?Variable not set}
      - ETHERSCAN_API_KEY=${ETHERSCAN_API_KEY?Variable not set}
      - ETHERSCAN_URL=${ETHERSCAN_URL?Variable not set}
      - UNISWAP_V3_ETH_USDC_ADDRESS=${UNISWAP_V3_ETH_USDC_ADDRESS?Variable not set}
      - SCHEDULER_INTERVAL_MINUTES=${SCHEDULER_INTERVAL_MINUTES?Variable not set}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check/"]
      interval: 10s
      timeout: 5s
      retries: 5
    build:
      context: ./backend

  frontend:
    image: '${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}'
    restart: always
    networks:
      - default
    depends_on:
      db:
        condition: service_healthy
        restart: true
      backend:
        condition: service_healthy
        restart: true
    ports:
      - "3000:3000"
    build:
      context: ./frontend

volumes:
  app-db-data:
  redis-data: